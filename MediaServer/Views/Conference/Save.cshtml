@model Talk
<div class="col-lg-12">
    <h1 class="mt-4">@ViewData["Title"]</h1>
    <!-- TODO: Simplify URLs of this form -->
    <form method="POST" id="saveForm" enctype="multipart/form-data" action="/@this.ViewContext.RouteData.Values["controller"].ToString()/@ViewData["ConferenceId"]/Save?oldName=@ViewData["OldName"]" >
        <div class="row">
            <div class="col-sm">
                <div class="form-group">
                    <label for="Thumbnail">Thumbnail</label>
                    <img id="Thumbnail" class="card-img-top" src="@Model.Thumbnail" alt="Talk thumbnail">
                    <input type="file" class="form-control-file mt-3" id="browseButton" name="ThumbnailImageFile" onchange="loadFile(event)" accept="image/*" value="@Model.Thumbnail">
                </div>
            </div>
            <div class="col-sm">
                <div class="form-group">
                    <label for="video">Video</label>
                    @Html.DropDownListFor(talk => talk.VideoName, (IEnumerable<SelectListItem>)ViewBag.VideoList, "Select video", new { @class = "form-control", @onchange = "onVideoSelected(this.value)", @id = "video" })
                </div>
                <div class="form-group">
                    <label for="TalkName">Name</label>
                    <input type="text" class="form-control" id="TalkName" name="TalkName" disabled="@ViewData["IsSave"]" value="@Model.TalkName" required>
                </div>
                <div class="form-group">
                    <label for="DateOfTalkString">Date of Talk</label>
                    <input type="text" class="form-control" id="DateOfTalkString" name="DateOfTalkString" disabled="@ViewData["IsSave"]" value="@Model.DateOfTalkString">
                </div>
                <div class="form-group">
                    <label for="Description">Description</label>
                    <textarea class="form-control" id="Description" name="Description" rows="3" disabled="@ViewData["IsSave"]" required>@Model.Description</textarea>
                </div>
                <div class="form-group">
                    <label for="Speaker">Speaker</label>
                    <input type="text" class="form-control" id="Speaker" name="Speaker" disabled="@ViewData["IsSave"]" value="@Model.Speaker" required>
                </div>
                <div class="form-group">
                    <label for="SpeakerDeck">Speaker Deck</label>
                    <input type="text" class="form-control" id="SpeakerDeck" name="SpeakerDeck" value="@Model.SpeakerDeck" disabled="@ViewData["IsSave"]">
                </div>
                <div class="row justify-content-end">
                    <button type="button" onclick="location.href='.';" class="btn btn-danger mr-2" style="width: 80px">Cancel</button>
                    <button type="submit" class="btn btn-success mr-3" id="saveButton" style="width: 80px" disabled="@ViewData["IsSave"]">Save</button>
                </div>
            </div>
        </div>
        <script type="text/javascript">
        // TODO: Move script
            // Disable save button while saving
        // TODO: Works? And Vanilla JS
        document.querySelector("#saveForm").addEventListener("submit", function(e) {
            var saveButton = document.getElementById("saveButton");
            var loadingText = '<i class="fa fa-circle-o-notch fa-spin"></i>';
            saveButton.innerHTML = loadingText;
            saveButton.disabled = 'true';
        });

            let thumbnail = document.getElementById('Thumbnail')

            // Preview thumbnail added by browse button
        function loadFile(event) {
            var reader = new FileReader();
            reader.onloadend = function(){
                thumbnail.src = reader.result;
            };
            reader.readAsDataURL(event.target.files[0]);
          };




        // Drag and Drop support for Thumbnail
        ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          thumbnail.addEventListener(eventName, preventDefaults, false)
        })

        function preventDefaults (e) {
          e.preventDefault()
          e.stopPropagation()
        }

        ;['dragenter', 'dragover'].forEach(eventName => {
          thumbnail.addEventListener(eventName, highlight, false)
        })

        ;['dragleave', 'drop'].forEach(eventName => {
          thumbnail.addEventListener(eventName, unhighlight, false)
        })

        function highlight(e) {
          thumbnail.classList.add('img-thumbnail')
        }

        function unhighlight(e) {
          thumbnail.classList.remove('img-thumbnail')
        }

       thumbnail.addEventListener('drop', handleDrop, false)

        function handleDrop(e) {
          let dt = e.dataTransfer
          let files = dt.files
            let file = dt.files[0];
            var imageType = /image.*/;
            if (file.type.match(imageType)) {
                document.getElementById('browseButton').files = files;
              previewFile(file)
            }
        }

        function previewFile(file) {
          let reader = new FileReader()
          reader.readAsDataURL(file)
          reader.onloadend = function() {
            thumbnail.src = reader.result
          }
        }






            // Enable buttons and check for slides
        function onVideoSelected(video) {
            var speakerDeck = document.getElementById("SpeakerDeck");
            var talkName = document.getElementById("TalkName");
            var disabled = video === "";
            document.getElementById("Description").disabled = disabled;
            document.getElementById("Speaker").disabled = disabled;
            speakerDeck.disabled = disabled;
            document.getElementById("saveButton").disabled = disabled;
            document.getElementById("DateOfTalkString").disabled = disabled;
            talkName.disabled = disabled;

            if (disabled) {
                return;
            }

            var talk = video.slice(0, -4);
            talkName.value = talk;
            speakerDeckName = talk + ".pdf";
            var speakerDeckUrl = "/@this.ViewContext.RouteData.Values["controller"].ToString()/@ViewData["ConferenceId"]/" + speakerDeckName;

            var request;
            if (window.XMLHttpRequest)
                request = new XMLHttpRequest();
            else
                request = new ActiveXObject("Microsoft.XMLHTTP");

            request.open('GET', speakerDeckUrl, true);
            request.onreadystatechange = checkReadyState;
            // TODO: Do I need send here?
            request.send();
            function checkReadyState() {
                if (request.readyState === 4) {
                    if (request.status == 200) {
                        speakerDeck.value = speakerDeckName;
                    } else {
                        speakerDeck.value = "";
                    }
                }
            }
        }
        </script>
    </form>
</div>




